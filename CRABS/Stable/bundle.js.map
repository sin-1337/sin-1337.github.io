{"version":3,"file":"bundle.js","sources":["../../../Dev/node_modules/bondage-club-mod-sdk/dist/bcmodsdk.js","../../../../Dev/src/modules/whisperplus.ts","../../../../Dev/src/modules/roster.ts","../../../../Dev/src/main.ts"],"sourcesContent":["// Bondage Club Mod Development Kit (1.2.0)\n// For more info see: https://github.com/Jomshir98/bondage-club-mod-sdk\n/** @type {ModSDKGlobalAPI} */\nvar bcModSdk=function(){\"use strict\";const o=\"1.2.0\";function e(o){alert(\"Mod ERROR:\\n\"+o);const e=new Error(o);throw console.error(e),e}const t=new TextEncoder;function n(o){return!!o&&\"object\"==typeof o&&!Array.isArray(o)}function r(o){const e=new Set;return o.filter((o=>!e.has(o)&&e.add(o)))}const i=new Map,a=new Set;function c(o){a.has(o)||(a.add(o),console.warn(o))}function s(o){const e=[],t=new Map,n=new Set;for(const r of f.values()){const i=r.patching.get(o.name);if(i){e.push(...i.hooks);for(const[e,a]of i.patches.entries())t.has(e)&&t.get(e)!==a&&c(`ModSDK: Mod '${r.name}' is patching function ${o.name} with same pattern that is already applied by different mod, but with different pattern:\\nPattern:\\n${e}\\nPatch1:\\n${t.get(e)||\"\"}\\nPatch2:\\n${a}`),t.set(e,a),n.add(r.name)}}e.sort(((o,e)=>e.priority-o.priority));const r=function(o,e){if(0===e.size)return o;let t=o.toString().replaceAll(\"\\r\\n\",\"\\n\");for(const[n,r]of e.entries())t.includes(n)||c(`ModSDK: Patching ${o.name}: Patch ${n} not applied`),t=t.replaceAll(n,r);return(0,eval)(`(${t})`)}(o.original,t);let i=function(e){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookChainExit)||void 0===i?void 0:i.call(t,o.name,n),c=r.apply(this,e);return null==a||a(),c};for(let t=e.length-1;t>=0;t--){const n=e[t],r=i;i=function(e){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookEnter)||void 0===i?void 0:i.call(t,o.name,n.mod),c=n.hook.apply(this,[e,o=>{if(1!==arguments.length||!Array.isArray(e))throw new Error(`Mod ${n.mod} failed to call next hook: Expected args to be array, got ${typeof o}`);return r.call(this,o)}]);return null==a||a(),c}}return{hooks:e,patches:t,patchesSources:n,enter:i,final:r}}function l(o,e=!1){let r=i.get(o);if(r)e&&(r.precomputed=s(r));else{let e=window;const a=o.split(\".\");for(let t=0;t<a.length-1;t++)if(e=e[a[t]],!n(e))throw new Error(`ModSDK: Function ${o} to be patched not found; ${a.slice(0,t+1).join(\".\")} is not object`);const c=e[a[a.length-1]];if(\"function\"!=typeof c)throw new Error(`ModSDK: Function ${o} to be patched not found`);const l=function(o){let e=-1;for(const n of t.encode(o)){let o=255&(e^n);for(let e=0;e<8;e++)o=1&o?-306674912^o>>>1:o>>>1;e=e>>>8^o}return((-1^e)>>>0).toString(16).padStart(8,\"0\").toUpperCase()}(c.toString().replaceAll(\"\\r\\n\",\"\\n\")),d={name:o,original:c,originalHash:l};r=Object.assign(Object.assign({},d),{precomputed:s(d),router:()=>{},context:e,contextProperty:a[a.length-1]}),r.router=function(o){return function(...e){return o.precomputed.enter.apply(this,[e])}}(r),i.set(o,r),e[r.contextProperty]=r.router}return r}function d(){for(const o of i.values())o.precomputed=s(o)}function p(){const o=new Map;for(const[e,t]of i)o.set(e,{name:e,original:t.original,originalHash:t.originalHash,sdkEntrypoint:t.router,currentEntrypoint:t.context[t.contextProperty],hookedByMods:r(t.precomputed.hooks.map((o=>o.mod))),patchedByMods:Array.from(t.precomputed.patchesSources)});return o}const f=new Map;function u(o){f.get(o.name)!==o&&e(`Failed to unload mod '${o.name}': Not registered`),f.delete(o.name),o.loaded=!1,d()}function g(o,t){o&&\"object\"==typeof o||e(\"Failed to register mod: Expected info object, got \"+typeof o),\"string\"==typeof o.name&&o.name||e(\"Failed to register mod: Expected name to be non-empty string, got \"+typeof o.name);let r=`'${o.name}'`;\"string\"==typeof o.fullName&&o.fullName||e(`Failed to register mod ${r}: Expected fullName to be non-empty string, got ${typeof o.fullName}`),r=`'${o.fullName} (${o.name})'`,\"string\"!=typeof o.version&&e(`Failed to register mod ${r}: Expected version to be string, got ${typeof o.version}`),o.repository||(o.repository=void 0),void 0!==o.repository&&\"string\"!=typeof o.repository&&e(`Failed to register mod ${r}: Expected repository to be undefined or string, got ${typeof o.version}`),null==t&&(t={}),t&&\"object\"==typeof t||e(`Failed to register mod ${r}: Expected options to be undefined or object, got ${typeof t}`);const i=!0===t.allowReplace,a=f.get(o.name);a&&(a.allowReplace&&i||e(`Refusing to load mod ${r}: it is already loaded and doesn't allow being replaced.\\nWas the mod loaded multiple times?`),u(a));const c=o=>{let e=g.patching.get(o.name);return e||(e={hooks:[],patches:new Map},g.patching.set(o.name,e)),e},s=(o,t)=>(...n)=>{var i,a;const c=null===(a=(i=m.errorReporterHooks).apiEndpointEnter)||void 0===a?void 0:a.call(i,o,g.name);g.loaded||e(`Mod ${r} attempted to call SDK function after being unloaded`);const s=t(...n);return null==c||c(),s},p={unload:s(\"unload\",(()=>u(g))),hookFunction:s(\"hookFunction\",((o,t,n)=>{\"string\"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const i=l(o),a=c(i);\"number\"!=typeof t&&e(`Mod ${r} failed to hook function '${o}': Expected priority number, got ${typeof t}`),\"function\"!=typeof n&&e(`Mod ${r} failed to hook function '${o}': Expected hook function, got ${typeof n}`);const s={mod:g.name,priority:t,hook:n};return a.hooks.push(s),d(),()=>{const o=a.hooks.indexOf(s);o>=0&&(a.hooks.splice(o,1),d())}})),patchFunction:s(\"patchFunction\",((o,t)=>{\"string\"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const i=l(o),a=c(i);n(t)||e(`Mod ${r} failed to patch function '${o}': Expected patches object, got ${typeof t}`);for(const[n,i]of Object.entries(t))\"string\"==typeof i?a.patches.set(n,i):null===i?a.patches.delete(n):e(`Mod ${r} failed to patch function '${o}': Invalid format of patch '${n}'`);d()})),removePatches:s(\"removePatches\",(o=>{\"string\"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const t=l(o);c(t).patches.clear(),d()})),callOriginal:s(\"callOriginal\",((o,t,n)=>{\"string\"==typeof o&&o||e(`Mod ${r} failed to call a function: Expected function name string, got ${typeof o}`);const i=l(o);return Array.isArray(t)||e(`Mod ${r} failed to call a function: Expected args array, got ${typeof t}`),i.original.apply(null!=n?n:globalThis,t)})),getOriginalHash:s(\"getOriginalHash\",(o=>{\"string\"==typeof o&&o||e(`Mod ${r} failed to get hash: Expected function name string, got ${typeof o}`);return l(o).originalHash}))},g={name:o.name,fullName:o.fullName,version:o.version,repository:o.repository,allowReplace:i,api:p,loaded:!0,patching:new Map};return f.set(o.name,g),Object.freeze(p)}function h(){const o=[];for(const e of f.values())o.push({name:e.name,fullName:e.fullName,version:e.version,repository:e.repository});return o}let m;const y=void 0===window.bcModSdk?window.bcModSdk=function(){const e={version:o,apiVersion:1,registerMod:g,getModsInfo:h,getPatchingInfo:p,errorReporterHooks:Object.seal({apiEndpointEnter:null,hookEnter:null,hookChainExit:null})};return m=e,Object.freeze(e)}():(n(window.bcModSdk)||e(\"Failed to init Mod SDK: Name already in use\"),1!==window.bcModSdk.apiVersion&&e(`Failed to init Mod SDK: Different version already loaded ('1.2.0' vs '${window.bcModSdk.version}')`),window.bcModSdk.version!==o&&alert(`Mod SDK warning: Loading different but compatible versions ('1.2.0' vs '${window.bcModSdk.version}')\\nOne of mods you are using is using an old version of SDK. It will work for now but please inform author to update`),window.bcModSdk);return\"undefined\"!=typeof exports&&(Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=y),y}();\n","export default class WhisperPlus {\n\n    // send chat message at range\n    private ChatRoomSendWhisperRanged(target: any, msg: string): boolean {\n        if (msg == \"\") {\n            return false;\n        }\n\n        // First ensure we have a valid target object\n        const TARGETMEMEBER = typeof target === 'object' ? target : ChatRoomCharacter.find(C => C.MemberNumber === parseInt(target));\n        if (!TARGETMEMEBER) {\n            ChatRoomSendLocalChatRoomSendLocal(`${TextGet(\"CommandNoWhisperTarget\")} ${target}.`, 30_000);\n            return;\n        }\n\n        // Handle self whispers with gray text and memo emoji\n        if (TARGETMEMEBER.MemberNumber === Player.MemberNumber) {\n            const SELFMESSAGE = `<span style=\"color:#989898\">üí≠ Log to </span><span style=\"color:${Player.LabelColor}\">self</span><span style=\"color:#989898\">: ${msg.replace(/\\)/g, \"Ôºâ\")}</span>`;\n            ChatRoomSendLocal(SELFMESSAGE);\n            return;\n        }\n\n        // Replace normal brackets with fake ones in the message\n        msg = msg.replace(/\\)/g, \"Ôºâ\");\n\n        // Prepare the message - now with ‚§µ instead of :\n        let formattedMsg = `(Whisper+‚ù©‚§µ\\n${msg}`;\n        if (Player.ChatSettings.OOCAutoClose && !msg.endsWith('Ôºâ')) {\n            formattedMsg += 'Ôºâ';\n        }\n\n        // check if target and player are the same\n        if (target.MemberNumber == Player.MemberNumber) {\n            addChatMessage(msg);\n        } else {\n            if (ChatRoomMapViewIsActive() && !ChatRoomMapViewCharacterOnWhisperRange(target) && msg[0] != \"(\") {\n                msg = `(${msg})`;\n            }\n\n            // build data payload\n            const DATA = ChatRoomGenerateChatRoomChatMessage(\"Whisper\", msg);\n            \n            // set the whisper target\n            DATA.Target = target.MemberNumber;\n\n            //send the whisper\n            const serverData = { ...DATA, Type: \"Whisper\" }\n            ServerSend(\"ChatRoomChat\", serverData);\n\n            // tell it who we are\n            DATA.Sender = Player.MemberNumber;\n\n            // send the chat to our window too\n            ChatRoomMessage(DATA);\n\n            // message was sent\n            return true;\n        }\n    }\n\n    // This starts /whisper+ if you click on the roster\n    public static sendWhisper(memberNumber: number): void {\n      for ( const command of Commands ) {\n        if (command.Tag == \"whisper+\") {\n          window.CommandSet(command.Tag + \" \" + memberNumber)\n        }\n      }\n    };\n\n    // this runs when a player enters the /whisper+ command or clicks the roster\n    public whisperplus(args: any): number {\n        // parse arguments into MEMBERNUMBER and messsage\n        const MEMBERNUMBER = parseInt(args.slice(0, args.indexOf(\" \")));\n        const MESSAGE = args.slice(args.indexOf(\" \") + 1);\n\n        // if membernumber is not a valid number, bail\n        if (Number.isNaN(MEMBERNUMBER)) {\n            ChatRoomSendLocal(\"Member number is invalid.\");\n            return 1;\n        }\n\n        if (MESSAGE == \"\") {\n            ChatRoomSendLocal(\"Message was blank\");\n            return 1;\n        }\n\n        // find player based no membernumber\n        const TARGET = ChatRoomCharacter.find(\n            (C: any) => C.MemberNumber == MEMBERNUMBER\n        );\n        this.ChatRoomSendWhisperRanged(TARGET || MEMBERNUMBER, MESSAGE);\n        return 0;\n    }\n}\n","import WhisperPlus from \"./whisperplus\";\nwindow.sendWhisper = WhisperPlus.sendWhisper;\n\nexport default class Roster {\n    const ICONS: Record<string, string> = {\n        \"admin\" : \"icons/admin.svg\",\n        \"vip\" : \"icons/vip.svg\",\n        \"player\" : \"icons/player.svg\",\n        \"you\" : \"icons/you.svg\",\n        \"owner\" : \"icons/owner.svg\",\n        \"sub\" : \"icons/sub.svg\",\n        \"trial\" : \"icons/trial.svg\",\n        \"lover\" : \"icons/lover.svg\",\n        \"friend\" : \"icons/friends.svg\",\n        \"whitelist\" : \"icons/whitelist.svg\",\n        \"blacklist\" : \"icons/blacklist.svg\",\n        \"ghost\" : \"icons/ghost.svg\"\n    }\n\n    icon_height = 0;\n    icon_width = 0\n\n    constructor (icon_height: number, icon_width: number) {\n        this.icon_height = icon_height;\n        this.icon_width = icon_width;\n        window.PlayerFocus = Roster.showPlayerFocus\n    }\n\n    printicon(key: string) : string {\n        let ICON = \"./icons/error.svg\";\n        if (key in this.ICONS) {\n            ICON = this.ICONS[key];\n        }\n\n        let absolutepath = \"https://sin-1337.github.io/CRABS/\"\n        let html = \"\";\n        html += \"<img \";\n        html += \"height=\" + this.icon_height + \"px' \";\n        html += \"width='\" + this.icon_width + \"px' \";\n        html += \"alt='\" + key + \"' \";\n        html += \"src='\" + absolutepath + ICON + \"'\";\n        html += \">\";\n        return(html);\n    }\n\n    // show help\n    showhelp() : string {\n        return `<table style=\"width: 100%\"><tr><td>\n            <span style=\" text-shadow: 0px 0px 3px #000000; white-space: normal;\">\n            <hr>\n            CRABS help sheet</br>\n            /roster</br>\n            This command lists the number of admins and players\n            in a room and gives you some informatoin about them </br>\n            \n            /players is deprecated, but still works currently.</br>\n\n            </br>\n            Arguments:\n            <hr>\n            help - show this menu </br>\n            count - show only the player count </br>\n            admins - show only a list of admins and the counts </br>\n            vips - show only room whitelisted and the counts </br>\n\n            </br>\n            Badges:\n            <hr>\n            ${this.printicon(\"admin\")} = Person is Admin</br>\n            ${this.printicon(\"vip\")} = Person is whitelisted in the room </br>\n            ${this.printicon(\"player\")} = Person is a normal user </br>\n\n            </br>\n            Icons:\n            <hr>\n            ${this.printicon(\"you\")} = Person is you </br>\n            ${this.printicon(\"owner\")} = Person is your owner </br>\n            ${this.printicon(\"sub\")} = Person is your submissive </br>\n            ${this.printicon(\"trial\")} = Person is on trial with you </br>\n            ${this.printicon(\"lover\")} = Person is your lover </br>\n            ${this.printicon(\"friend\")} = Person is a friend </br>\n            ${this.printicon(\"whitelist\")} = You have this person whitelisted </br>\n            ${this.printicon(\"blacklist\")} = You have this person blacklisted </br>\n            ${this.printicon(\"ghost\")} = You have ghosted this person </br>\n\n            </br>\n            Actions:\n            <hr>\n            Click Badge - If you click the badge for a player it will be as if you clicked them to interact. </br>\n            Click name - If you click the name/number of a player it will whisper them without range constraints. </br>\n            </span>\n            </td>\n            </tr>\n            </table>`;\n    }\n\n\n    // Opens the player profile\n    // This functions is setup up to be exposed to the global DOM\n    window.showPlayerProfile = function (MemberNumber) {\n        // Check if the person is still in the room\n        const PLAYER = ChatRoomCharacter.find(C => C.MemberNumber == MemberNumber);\n        if (PLAYER) {\n            ChatRoomStatusUpdate(\"Preference\");\n            InformationSheetLoadCharacter(PLAYER);\n        } else {\n            ChatRoomSendLocal(\"This person is no longer in the room.\");\n        }\n    };\n\n    // This functions is setup up to be exposed to the global DOM\n    public static showPlayerFocus(MemberNumber: number): void {\n        // Check if the person is still in the room\n      const PLAYER = ChatRoomCharacter.find(C => C.MemberNumber == MemberNumber);\n        if (PLAYER) {\n            ChatRoomStatusUpdate(\"Preference\");\n            ChatRoomFocusCharacter(PLAYER);\n        } else {\n            ChatRoomSendLocal(\"This person is no longer in the room.\");\n        }\n    };\n\n    // formats the data for outputting\n   formatoutput(player: any, badge: string, player_icons: string, isMe: boolean) : string {\n      let playername = CharacterNickname(player);\n      let output = `<tr>\n                <td style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"cursor:pointer;\" onclick=\"PlayerFocus(${player.MemberNumber})\">${badge}</span></td>`;\n\n      if (isMe) {\n      // if the player is me, don't let me whisper myself\n        output += `<td style=\"height:24px; padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"color:${player.LabelColor || '#000000'};\n                    font-family: Arial, sans-serif;\n                    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.7); white-space: nowrap;\">\n                      ${CharacterNickname(player).normalize(\"NFKC\")}[${player.MemberNumber}]\n                  </span>${player_icons}</td>\n              </tr>`;\n      }\n      else {\n      // set up whispering\n         output += `<td style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"color:${player.LabelColor || '#000000'}; cursor:pointer;\n                    font-family: Arial, sans-serif;\n                    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.7); white-space: nowrap;\"\n                    onclick=\"sendWhisper(${player.MemberNumber})\"\n                    onmouseover=\"this.style.textDecoration='underline';\"\n                    onmouseout=\"this.style.textDecoration='none';\">\n                      ${CharacterNickname(player).normalize(\"NFKC\")}[${player.MemberNumber}]\n                  </span>${player_icons}</td>\n              </tr>`;\n      }\n\n      return output;\n    }\n\n    // determine if player is admin or whitelisted in the room and set their badge icon\n    setbadge(player: any) : string {\n      let badge = this.printicon(\"player\");\n      badge = ChatRoomData.Whitelist.includes(player.MemberNumber) ? this.printicon(\"vip\") : badge;\n      badge = ChatRoomData.Admin.includes(player.MemberNumber) ? this.printicon(\"admin\") : badge\n      return badge;\n    }\n\n    setIcons(player: any) : string {\n      let player_icons = \"\";\n      if (Player.OwnerNumber() == player.MemberNumber) {\n        // person owns you\n        player_icons += this.printicon(\"owner\") + \" \";\n      }\n\n      else if (Player.IsInFamilyOfMemberNumber(player.MemberNumber)) {\n        // if they down't own you but you are in their family, we assume you own them\n        if (Player.IsOwnedByPlayer(player.membernumber)) {\n          // The person is fully owned if this is true\n          player_icons += this.printicon(\"sub\") + \" \";\n        }\n        else {\n          // person is on trial\n          player_icons += this.printicon(\"trial\") + \" \"\n        }\n      }\n      if (Player.GetLoversNumbers().includes(player.MemberNumber)) {\n        // person is a lover\n        player_icons += this.printicon(\"lover\") + \" \";\n      }\n      if (Player.FriendList.includes(player.MemberNumber)) {\n        // person is a friend\n        player_icons += this.printicon(\"friend\") + \" \";\n      }\n      if (Player.WhiteList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"whitelist\") + \" \";\n      }\n      if (Player.BlackList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"blacklist\") + \" \";\n      }\n      if (Player.GhostList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"ghost\") + \" \";\n      }\n      return player_icons;\n    }\n\n    checkIfMe(player: any) : boolean {\n      return player.MemberNumber == Player.MemberNumber ? true : false;\n    }\n\n    displayroster(args: any): void {\n        const SPLITARGS = args.split(\" \");\n        if (SPLITARGS[0].toLowerCase() == \"help\") {\n            ChatRoomSendLocal(this.showhelp());\n            return;\n        }\n\n        let me_output_html = \"\"; // holds data about user who ran script\n        let admin_output_html = \"\"; // holds admins\n        let vip_output_html = \"\"; // holds whitelisted users\n        let player_output_html = \"\"; // holds normal players\n        let player; // the person we found in the room\n        let admin_count = 0; // number of admins in the room\n        let badge = \"\"; // holds the admin icon if the player is an admin\n        let player_icons = \"\"; // holds the list of player/status icons (string)\n        let MemberNumber: number;\n        // filter variables, show or not show certain output\n        let showme = true; // person who ran the script (you)\n        let showadmins = true; // room admins\n        let showvip = true; // room whitelists\n        let showplayers = true; // normal players\n\n\n        //get a list of players\n        for (let person in ChatRoomData.Character) {\n            // find membernumber for current player in list\n            MemberNumber = ChatRoomData.Character[person].MemberNumber;\n\n            // Find player\n            player = ChatRoomCharacter.find((C) => C.MemberNumber == MemberNumber);\n\n            //bail out and return placeholder if player is not available.\n            if (!player) {\n                player_output_html +=\n                    \"‚ùì <span style='color:#FF0000'>[Unknown Person]</span>\\n\";\n                continue;\n            }\n\n            // check if the player is also an admin or vip and add icon with admin given priority\n            badge = this.setbadge(player);\n            player_icons = this.setIcons(player);\n\n            // if the player is me (person who ran the script)\n            if (this.checkIfMe(player)) {\n                // mark me with a star icon\n                player_icons = this.printicon(\"you\") + \" \" + player_icons;\n\n                // format my outpupt and store\n                me_output_html = this.formatoutput(player, badge, player_icons, true);\n            }\n\n            // check if the player is an admin and update the count, also flad the player as admin in the output list.\n            if (ChatRoomData.Admin.includes(player.MemberNumber)) {\n                admin_count++;\n                if (!this.checkIfMe(player, Player)) {\n                    // if the player is not me, output admin and skip rest of loop\n                    admin_output_html += this.formatoutput(\n                        player,\n                        badge,\n                        player_icons,\n                        false\n                    );\n                    continue;\n                }\n            } else if (\n                ChatRoomData.Whitelist.includes(player.MemberNumber) &&\n                !this.checkIfMe(player, Player)\n            ) {\n                // if the player isn't an admin, is the player is whitelested?\n                vip_output_html += this.formatoutput(player, badge, player_icons, false);\n                continue;\n            } else if (!this.checkIfMe(player)) {\n                // player is normal, nonadmin, not whitelist, and not me.\n                player_output_html += this.formatoutput(\n                    player,\n                    badge,\n                    player_icons,\n                    false\n                );\n            }\n        }\n\n        // if argument is \"count\", set filter vars and skip loop\n        if (SPLITARGS.some((item) => item.toLowerCase() === \"count\")) {\n            console.log(\"count only\");\n            showme = false;\n            showadmins = false;\n            showvip = false;\n            showplayers = false;\n        }\n\n        // if argument is admins, set filter vars to only show admins and continue\n        if (SPLITARGS.some((item) => item.toLowerCase() === \"admins\")) {\n            console.log(\"admins only\");\n            showme = false;\n            showvip = false;\n            showplayers = false;\n        }\n\n        // if argument is vips, set filter vars to only show vips (whitelisted) and continue\n        if (SPLITARGS.some((item) => item.toLowerCase() === \"vips\")) {\n            console.log(\"vips only\");\n            showme = false;\n            showadmins = false;\n            showplayers = false;\n        }\n\n        //output total number of players/admins\n        //TODO: include this in the table space and add a header\n        ChatRoomSendLocal(\n            \"<div>There are \" +\n              admin_count +\n              \"/\" +\n              ChatRoomData.Admin.length +\n              \" admins in the room.</div>\"\n        );\n        ChatRoomSendLocal(\n            \"There are \" +\n              ChatRoomCharacter.length +\n              \"/\" +\n              ChatRoomData.Limit +\n              \" total players in the room.</div>\"\n        );\n        let output_html = \"\";\n\n        // start the tabble and remove the boarders\n        output_html += `<table style=\"border: 0px;\">`;\n\n        // if the filter var resolves to true, add the respective output.\n        output_html = showme ? output_html + me_output_html : output_html;\n        output_html = showadmins ? output_html + admin_output_html : output_html;\n        output_html = showvip ? output_html + vip_output_html : output_html;\n        output_html = showplayers\n            ? output_html + player_output_html\n            : output_html;\n\n        // finish the table\n        output_html += `</table>`;\n\n        // show the final output\n        ChatRoomSendLocal(output_html);\n    }\n}\n","// import section\nimport bcModSDK from 'bondage-club-mod-sdk';\nimport Roster from \"./modules/roster\";\nimport WhisperPlus from \"./modules/whisperplus\";\n\n\n// configure the version and mod name\nconst VERSION = \"1.0.0.1\";\nconst NAME = \"Crazy Roster Add-on By Sin\";\nconst NICKNAME = \"CRABS\";\n\n//these are in em units\nconst ICON_HEIGHT = 24;\nconst ICON_WIDTH = 24;\n\n//register the mod\nconst CRABS = bcModSDK.registerMod({\n    name: NICKNAME,\n    fullName: NAME,\n    version: VERSION,\n    repository: \"https://github.com/sin-1337/CRABS\",\n});\n\nconst WHISPERPLUS = new WhisperPlus();\nconst ROSTER = new Roster(ICON_HEIGHT, ICON_WIDTH);\n\n\n// TODO: create ui to turn this off!!\n// TODO: reformat this output maybe?\n// set up a handler for room entry\nChatRoomRegisterMessageHandler({\n  Description: \"Send room stats on entry.\",\n  Priority: 0, // trigger immediately\n  Callback: (data) => {\n    // check if we are a player and we entered a room\n    if (\n      data.Type === \"Action\" &&\n      data.Content === \"ServerEnter\" &&\n      data.Sender === Player.MemberNumber\n    ) {\n      // work on a delay\n      setTimeout(() => {\n        // if the player left the room, bail!\n        if (Player.LastChatRoom === null) {\n          return false;\n        }\n\n        // get player permissions\n        const currentPermissionText = `${TextGetInScope(\n          \"Screens/Character/InformationSheet/Text_InformationSheet.csv\",\n          \"PermissionLevel\" + Player.ItemPermission.toString()\n        )} (${Player.ItemPermission})`;\n\n        // format and display the player permissions\n        ChatRoomSendLocal(`\n                  <hr>\n                  <div style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\">\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: #5BA3E0; font-weight: bold;\">Player Item Permission: </span>\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: ${Player.LabelColor}; font-weight: bold; text-shadow: 0 0 1px black;\">${currentPermissionText}</span>\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: #5BA3E0; font-weight: bold;\">&nbsp;</span>\n                  </div>\n                `);\n\n        // output room details\n        ChatRoomSendLocal(\n          \"<div>Room details for: \" + ChatRoomData.Name + \"</div>\"\n        );\n        for (let index in Commands) {\n          index = parseInt(index);\n          if (Commands[index].Tag === \"players\") {\n            Commands[index].Action(\"count\");\n            break;\n          }\n        }\n\n        // output message letting players know how to view the full roster\n        ChatRoomSendLocal(\"<div>To see the full roster use /players</div><hr>\");\n      }, 3600);\n    }\n\n    // must return false to allow other handlers to work with the data\n    return false;\n  },\n});\n\n// implements the whisper+ command\nCommandCombine([\n    {\n        Tag: \"whisper+\",\n        Description: \"Enables the /whisper+ command that is global to a map room\",\n        Action: (args) => {\n            WHISPERPLUS.whisperplus(args);\n        },\n    },\n]);\n\n// implements the /crabs command\nCommandCombine([\n    {\n        Tag: \"crabs\",\n        Description: \"Show the player count, helpful in maps.\",\n        Action: (args) => {\n            ROSTER.displayroster(args);\n        },\n    }\n]); \n\n\n// implements the /roster command\nCommandCombine([\n    {\n        Tag: \"roster\",\n        Description: \"Show the player count, helpful in maps.\",\n        Action: (args) => {\n            ROSTER.displayroster(args);\n        },\n    }\n]); \n\n// implements the /players command\nCommandCombine([\n    {\n        Tag: \"players\",\n        Description: \"Deprecated: Show the player count, helpful in maps.\",\n        Action: (args) => {\n            ROSTER.displayroster(args);\n        },\n    }\n]); \n"],"names":["o","e","alert","Error","console","error","t","TextEncoder","n","Array","isArray","r","Set","filter","has","add","i","Map","a","c","warn","s","f","values","patching","get","name","push","hooks","patches","entries","set","sort","priority","size","toString","replaceAll","includes","eval","original","m","errorReporterHooks","hookChainExit","call","apply","this","length","hookEnter","mod","hook","arguments","patchesSources","enter","final","l","precomputed","window","split","slice","join","encode","padStart","toUpperCase","d","originalHash","Object","assign","router","context","contextProperty","p","sdkEntrypoint","currentEntrypoint","hookedByMods","map","patchedByMods","from","u","delete","loaded","g","fullName","version","repository","allowReplace","apiEndpointEnter","unload","hookFunction","indexOf","splice","patchFunction","removePatches","clear","callOriginal","globalThis","getOriginalHash","api","freeze","h","y","bcModSdk","apiVersion","registerMod","getModsInfo","getPatchingInfo","seal","defineProperty","exports","value","WhisperPlus","ChatRoomSendWhisperRanged","target","msg","TARGETMEMEBER","ChatRoomCharacter","find","C","MemberNumber","parseInt","ChatRoomSendLocalChatRoomSendLocal","TextGet","Player","SELFMESSAGE","LabelColor","replace","ChatRoomSendLocal","formattedMsg","ChatSettings","OOCAutoClose","endsWith","ChatRoomMapViewIsActive","ChatRoomMapViewCharacterOnWhisperRange","DATA","ChatRoomGenerateChatRoomChatMessage","Target","serverData","Type","ServerSend","Sender","ChatRoomMessage","addChatMessage","sendWhisper","memberNumber","command","Commands","Tag","CommandSet","whisperplus","args","MEMBERNUMBER","MESSAGE","Number","isNaN","TARGET","Roster","constructor","icon_height","icon_width","ICONS","admin","vip","player","you","owner","sub","trial","lover","friend","whitelist","blacklist","ghost","showPlayerProfile","PLAYER","ChatRoomStatusUpdate","InformationSheetLoadCharacter","PlayerFocus","showPlayerFocus","printicon","key","ICON","html","showhelp","ChatRoomFocusCharacter","formatoutput","badge","player_icons","isMe","CharacterNickname","output","normalize","setbadge","ChatRoomData","Whitelist","Admin","setIcons","OwnerNumber","IsInFamilyOfMemberNumber","IsOwnedByPlayer","membernumber","GetLoversNumbers","FriendList","WhiteList","BlackList","GhostList","checkIfMe","displayroster","SPLITARGS","toLowerCase","me_output_html","admin_output_html","vip_output_html","player_output_html","admin_count","showme","showadmins","showvip","showplayers","person","Character","some","item","log","Limit","output_html","bcModSDK","WHISPERPLUS","ROSTER","ChatRoomRegisterMessageHandler","Description","Priority","Callback","data","Content","setTimeout","LastChatRoom","currentPermissionText","TextGetInScope","ItemPermission","Name","index","Action","CommandCombine"],"mappings":"irBAGa,WAAwB,MAAMA,EAAE,QAAQ,SAASC,EAAED,GAAGE,MAAM,eAAeF,GAAG,MAAMC,EAAE,IAAIE,MAAMH,GAAG,MAAMI,QAAQC,MAAMJ,GAAGA,CAAC,CAAC,MAAMK,EAAE,IAAIC,YAAY,SAASC,EAAER,GAAG,QAAQA,GAAG,iBAAiBA,IAAIS,MAAMC,QAAQV,EAAE,CAAC,SAASW,EAAEX,GAAG,MAAMC,EAAE,IAAIW,IAAI,OAAOZ,EAAEa,QAAQb,IAAIC,EAAEa,IAAId,IAAIC,EAAEc,IAAIf,IAAI,CAAC,MAAMgB,EAAE,IAAIC,IAAIC,EAAE,IAAIN,IAAI,SAASO,EAAEnB,GAAGkB,EAAEJ,IAAId,KAAKkB,EAAEH,IAAIf,GAAGI,QAAQgB,KAAKpB,GAAG,CAAC,SAASqB,EAAErB,GAAG,MAAMC,EAAE,GAAGK,EAAE,IAAIW,IAAIT,EAAE,IAAII,IAAI,IAAI,MAAMD,KAAKW,EAAEC,SAAS,CAAC,MAAMP,EAAEL,EAAEa,SAASC,IAAIzB,EAAE0B,MAAM,GAAGV,EAAE,CAACf,EAAE0B,QAAQX,EAAEY,OAAO,IAAI,MAAM3B,EAAEiB,KAAKF,EAAEa,QAAQC,UAAUxB,EAAEQ,IAAIb,IAAIK,EAAEmB,IAAIxB,KAAKiB,GAAGC,EAAE,gBAAgBR,EAAEe,8BAA8B1B,EAAE0B,2GAA2GzB,eAAeK,EAAEmB,IAAIxB,IAAI,gBAAgBiB,KAAKZ,EAAEyB,IAAI9B,EAAEiB,GAAGV,EAAEO,IAAIJ,EAAEe,KAAK,CAAC,CAACzB,EAAE+B,MAAM,CAAChC,EAAEC,IAAIA,EAAEgC,SAASjC,EAAEiC,WAAW,MAAMtB,EAAE,SAASX,EAAEC,GAAG,GAAG,IAAIA,EAAEiC,KAAK,OAAOlC,EAAE,IAAIM,EAAEN,EAAEmC,WAAWC,WAAW,OAAO,MAAM,IAAI,MAAM5B,EAAEG,KAAKV,EAAE6B,UAAUxB,EAAE+B,SAAS7B,IAAIW,EAAE,oBAAoBnB,EAAE0B,eAAelB,iBAAiBF,EAAEA,EAAE8B,WAAW5B,EAAEG,GAAG,OAAM,EAAG2B,MAAM,IAAIhC,KAAK,CAAhO,CAAkON,EAAEuC,SAASjC,GAAG,IAAIU,EAAE,SAASf,GAAG,IAAIK,EAAEU,EAAE,MAAME,EAAE,QAAQF,GAAGV,EAAEkC,EAAEC,oBAAoBC,qBAAgB,IAAS1B,OAAE,EAAOA,EAAE2B,KAAKrC,EAAEN,EAAE0B,KAAKlB,GAAGW,EAAER,EAAEiC,MAAMC,KAAK5C,GAAG,OAAO,MAAMiB,GAAGA,IAAIC,CAAC,EAAE,IAAI,IAAIb,EAAEL,EAAE6C,OAAO,EAAExC,GAAG,EAAEA,IAAI,CAAC,MAAME,EAAEP,EAAEK,GAAGK,EAAEK,EAAEA,EAAE,SAASf,GAAG,IAAIK,EAAEU,EAAE,MAAME,EAAE,QAAQF,GAAGV,EAAEkC,EAAEC,oBAAoBM,iBAAY,IAAS/B,OAAE,EAAOA,EAAE2B,KAAKrC,EAAEN,EAAE0B,KAAKlB,EAAEwC,KAAK7B,EAAEX,EAAEyC,KAAKL,MAAMC,KAAK,CAAC5C,EAAED,IAAI,GAAG,IAAIkD,UAAUJ,SAASrC,MAAMC,QAAQT,GAAG,MAAM,IAAIE,MAAM,OAAOK,EAAEwC,uEAAuEhD,KAAK,OAAOW,EAAEgC,KAAKE,KAAK7C,EAAC,IAAK,OAAO,MAAMkB,GAAGA,IAAIC,CAAC,CAAC,CAAC,MAAM,CAACS,MAAM3B,EAAE4B,QAAQvB,EAAE6C,eAAe3C,EAAE4C,MAAMpC,EAAEqC,MAAM1C,EAAE,CAAC,SAAS2C,EAAEtD,EAAEC,GAAE,GAAI,IAAIU,EAAEK,EAAES,IAAIzB,GAAG,GAAGW,EAAEV,IAAIU,EAAE4C,YAAYlC,EAAEV,QAAQ,CAAC,IAAIV,EAAEuD,OAAO,MAAMtC,EAAElB,EAAEyD,MAAM,KAAK,IAAI,IAAInD,EAAE,EAAEA,EAAEY,EAAE4B,OAAO,EAAExC,IAAI,GAAGL,EAAEA,EAAEiB,EAAEZ,KAAKE,EAAEP,GAAG,MAAM,IAAIE,MAAM,oBAAoBH,8BAA8BkB,EAAEwC,MAAM,EAAEpD,EAAE,GAAGqD,KAAK,sBAAsB,MAAMxC,EAAElB,EAAEiB,EAAEA,EAAE4B,OAAO,IAAI,GAAG,mBAAmB3B,EAAE,MAAM,IAAIhB,MAAM,oBAAoBH,6BAA6B,MAAMsD,EAAE,SAAStD,GAAG,IAAIC,GAAG,EAAE,IAAI,MAAMO,KAAKF,EAAEsD,OAAO5D,GAAG,CAAC,IAAIA,EAAE,KAAKC,EAAEO,GAAG,IAAI,IAAIP,EAAE,EAAEA,EAAE,EAAEA,IAAID,EAAE,EAAEA,GAAG,UAAUA,IAAI,EAAEA,IAAI,EAAEC,EAAEA,IAAI,EAAED,CAAC,CAAC,QAAWC,IAAK,GAAGkC,SAAS,IAAI0B,SAAS,EAAE,KAAKC,aAAa,CAAzL,CAA2L3C,EAAEgB,WAAWC,WAAW,OAAO,OAAO2B,EAAE,CAACrC,KAAK1B,EAAEuC,SAASpB,EAAE6C,aAAaV,GAAG3C,EAAEsD,OAAOC,OAAOD,OAAOC,OAAO,CAAE,EAACH,GAAG,CAACR,YAAYlC,EAAE0C,GAAGI,OAAO,OAAOC,QAAQnE,EAAEoE,gBAAgBnD,EAAEA,EAAE4B,OAAO,KAAKnC,EAAEwD,OAAO,SAASnE,GAAG,OAAO,YAAYC,GAAG,OAAOD,EAAEuD,YAAYH,MAAMR,MAAMC,KAAK,CAAC5C,GAAG,CAAC,CAA7E,CAA+EU,GAAGK,EAAEe,IAAI/B,EAAEW,GAAGV,EAAEU,EAAE0D,iBAAiB1D,EAAEwD,MAAM,CAAC,OAAOxD,CAAC,CAAC,SAASoD,IAAI,IAAI,MAAM/D,KAAKgB,EAAEO,SAASvB,EAAEuD,YAAYlC,EAAErB,EAAE,CAAC,SAASsE,IAAI,MAAMtE,EAAE,IAAIiB,IAAI,IAAI,MAAMhB,EAAEK,KAAKU,EAAEhB,EAAE+B,IAAI9B,EAAE,CAACyB,KAAKzB,EAAEsC,SAASjC,EAAEiC,SAASyB,aAAa1D,EAAE0D,aAAaO,cAAcjE,EAAE6D,OAAOK,kBAAkBlE,EAAE8D,QAAQ9D,EAAE+D,iBAAiBI,aAAa9D,EAAEL,EAAEiD,YAAY3B,MAAM8C,KAAK1E,GAAGA,EAAEgD,OAAO2B,cAAclE,MAAMmE,KAAKtE,EAAEiD,YAAYJ,kBAAkB,OAAOnD,CAAC,CAAC,MAAMsB,EAAE,IAAIL,IAAI,SAAS4D,EAAE7E,GAAGsB,EAAEG,IAAIzB,EAAE0B,QAAQ1B,GAAGC,EAAE,yBAAyBD,EAAE0B,yBAAyBJ,EAAEwD,OAAO9E,EAAE0B,MAAM1B,EAAE+E,QAAO,EAAGhB,GAAG,CAAC,SAASiB,EAAEhF,EAAEM,GAAGN,GAAG,iBAAiBA,GAAGC,EAAE,4DAA4DD,GAAG,iBAAiBA,EAAE0B,MAAM1B,EAAE0B,MAAMzB,EAAE,4EAA4ED,EAAE0B,MAAM,IAAIf,EAAE,IAAIX,EAAE0B,QAAQ,iBAAiB1B,EAAEiF,UAAUjF,EAAEiF,UAAUhF,EAAE,0BAA0BU,2DAA2DX,EAAEiF,YAAYtE,EAAE,IAAIX,EAAEiF,aAAajF,EAAE0B,SAAS,iBAAiB1B,EAAEkF,SAASjF,EAAE,0BAA0BU,gDAAgDX,EAAEkF,WAAWlF,EAAEmF,aAAanF,EAAEmF,gBAAW,QAAQ,IAASnF,EAAEmF,YAAY,iBAAiBnF,EAAEmF,YAAYlF,EAAE,0BAA0BU,gEAAgEX,EAAEkF,WAAW,MAAM5E,IAAIA,EAAE,CAAA,GAAIA,GAAG,iBAAiBA,GAAGL,EAAE,0BAA0BU,6DAA6DL,KAAK,MAAMU,GAAE,IAAKV,EAAE8E,aAAalE,EAAEI,EAAEG,IAAIzB,EAAE0B,MAAMR,IAAIA,EAAEkE,cAAcpE,GAAGf,EAAE,wBAAwBU,iGAAiGkE,EAAE3D,IAAI,MAAMC,EAAEnB,IAAI,IAAIC,EAAE+E,EAAExD,SAASC,IAAIzB,EAAE0B,MAAM,OAAOzB,IAAIA,EAAE,CAAC2B,MAAM,GAAGC,QAAQ,IAAIZ,KAAK+D,EAAExD,SAASO,IAAI/B,EAAE0B,KAAKzB,IAAIA,GAAGoB,EAAE,CAACrB,EAAEM,IAAI,IAAIE,KAAK,IAAIQ,EAAEE,EAAE,MAAMC,EAAE,QAAQD,GAAGF,EAAEwB,EAAEC,oBAAoB4C,wBAAmB,IAASnE,OAAE,EAAOA,EAAEyB,KAAK3B,EAAEhB,EAAEgF,EAAEtD,MAAMsD,EAAED,QAAQ9E,EAAE,OAAOU,yDAAyD,MAAMU,EAAEf,KAAKE,GAAG,OAAO,MAAMW,GAAGA,IAAIE,GAAGiD,EAAE,CAACgB,OAAOjE,EAAE,UAAQ,IAAMwD,EAAEG,KAAKO,aAAalE,EAAE,iBAAiBrB,EAAEM,EAAEE,KAAK,iBAAiBR,GAAGA,GAAGC,EAAE,OAAOU,2EAA2EX,KAAK,MAAMgB,EAAEsC,EAAEtD,GAAGkB,EAAEC,EAAEH,GAAG,iBAAiBV,GAAGL,EAAE,OAAOU,8BAA8BX,4CAA4CM,KAAK,mBAAmBE,GAAGP,EAAE,OAAOU,8BAA8BX,0CAA0CQ,KAAK,MAAMa,EAAE,CAAC2B,IAAIgC,EAAEtD,KAAKO,SAAS3B,EAAE2C,KAAKzC,GAAG,OAAOU,EAAEU,MAAMD,KAAKN,GAAG0C,IAAI,KAAK,MAAM/D,EAAEkB,EAAEU,MAAM4D,QAAQnE,GAAGrB,GAAG,IAAIkB,EAAEU,MAAM6D,OAAOzF,EAAE,GAAG+D,IAAG,CAAG,IAAG2B,cAAcrE,EAAE,iBAAe,CAAGrB,EAAEM,KAAK,iBAAiBN,GAAGA,GAAGC,EAAE,OAAOU,2EAA2EX,KAAK,MAAMgB,EAAEsC,EAAEtD,GAAGkB,EAAEC,EAAEH,GAAGR,EAAEF,IAAIL,EAAE,OAAOU,+BAA+BX,2CAA2CM,KAAK,IAAI,MAAME,EAAEQ,KAAKiD,OAAOnC,QAAQxB,GAAG,iBAAiBU,EAAEE,EAAEW,QAAQE,IAAIvB,EAAEQ,GAAG,OAAOA,EAAEE,EAAEW,QAAQiD,OAAOtE,GAAGP,EAAE,OAAOU,+BAA+BX,gCAAgCQ,MAAMuD,GAAI,IAAG4B,cAActE,EAAE,iBAAiBrB,IAAI,iBAAiBA,GAAGA,GAAGC,EAAE,OAAOU,2EAA2EX,KAAK,MAAMM,EAAEgD,EAAEtD,GAAGmB,EAAEb,GAAGuB,QAAQ+D,QAAQ7B,GAAI,IAAG8B,aAAaxE,EAAE,gBAAc,CAAGrB,EAAEM,EAAEE,KAAK,iBAAiBR,GAAGA,GAAGC,EAAE,OAAOU,0EAA0EX,KAAK,MAAMgB,EAAEsC,EAAEtD,GAAG,OAAOS,MAAMC,QAAQJ,IAAIL,EAAE,OAAOU,gEAAgEL,KAAKU,EAAEuB,SAASK,MAAM,MAAMpC,EAAEA,EAAEsF,WAAWxF,EAAG,IAAGyF,gBAAgB1E,EAAE,mBAAmBrB,IAAI,iBAAiBA,GAAGA,GAAGC,EAAE,OAAOU,mEAAmEX,KAAYsD,EAAEtD,GAAGgE,iBAAiBgB,EAAE,CAACtD,KAAK1B,EAAE0B,KAAKuD,SAASjF,EAAEiF,SAASC,QAAQlF,EAAEkF,QAAQC,WAAWnF,EAAEmF,WAAWC,aAAapE,EAAEgF,IAAI1B,EAAES,QAAO,EAAGvD,SAAS,IAAIP,KAAK,OAAOK,EAAES,IAAI/B,EAAE0B,KAAKsD,GAAGf,OAAOgC,OAAO3B,EAAE,CAAC,SAAS4B,IAAI,MAAMlG,EAAE,GAAG,IAAI,MAAMC,KAAKqB,EAAEC,SAASvB,EAAE2B,KAAK,CAACD,KAAKzB,EAAEyB,KAAKuD,SAAShF,EAAEgF,SAASC,QAAQjF,EAAEiF,QAAQC,WAAWlF,EAAEkF,aAAa,OAAOnF,CAAC,CAAC,IAAIwC,EAAE,MAAM2D,OAAE,IAAS3C,OAAO4C,SAAS5C,OAAO4C,SAAS,WAAW,MAAMnG,EAAE,CAACiF,QAAQlF,EAAEqG,WAAW,EAAEC,YAAYtB,EAAEuB,YAAYL,EAAEM,gBAAgBlC,EAAE7B,mBAAmBwB,OAAOwC,KAAK,CAACpB,iBAAiB,KAAKtC,UAAU,KAAKL,cAAc,QAAQ,OAAOF,EAAEvC,EAAEgE,OAAOgC,OAAOhG,EAAE,CAA/M,IAAoNO,EAAEgD,OAAO4C,WAAWnG,EAAE,+CAA+C,IAAIuD,OAAO4C,SAASC,YAAYpG,EAAE,yEAAyEuD,OAAO4C,SAASlB,aAAa1B,OAAO4C,SAASlB,UAAUlF,GAAGE,MAAM,2EAA2EsD,OAAO4C,SAASlB,gIAAgI1B,OAAO4C,UAA8CnC,OAAOyC,eAAeC,QAAQ,aAAa,CAACC,OAAM,IAAKD,gBAAgBR,CAAI,CAAtpO,kDCHC,MAAOU,YAGT,yBAAAC,CAA0BC,OAAaC,KAC3C,GAAW,IAAPA,IACA,OAAO,EAIX,MAAMC,cAAkC,iBAAXF,OAAsBA,OAASG,kBAAkBC,MAAKC,GAAKA,EAAEC,eAAiBC,SAASP,UACpH,IAAKE,cAED,YADAM,mCAAmC,GAAGC,QAAQ,6BAA6BT,UAAW,KAK1F,GAAIE,cAAcI,eAAiBI,OAAOJ,aAAc,CACpD,MAAMK,YAAc,mEAAmED,OAAOE,wDAAwDX,IAAIY,QAAQ,MAAO,cAEzK,YADAC,kBAAkBH,YAErB,CAMD,IAAII,aAAe,gBAHnBd,IAAMA,IAAIY,QAAQ,MAAO,OASzB,GALIH,OAAOM,aAAaC,eAAiBhB,IAAIiB,SAAS,OAClDH,cAAgB,KAIhBf,OAAOM,cAAgBI,OAAOJ,aAE3B,CACCa,4BAA8BC,uCAAuCpB,SAAqB,KAAVC,IAAI,KACpFA,IAAM,IAAIA,QAId,MAAMoB,KAAOC,oCAAoC,UAAWrB,KAG5DoB,KAAKE,OAASvB,OAAOM,aAGrB,MAAMkB,0CAAkBH,MAAI,CAAEI,KAAM,YAUpC,OATAC,WAAW,eAAgBF,YAG3BH,KAAKM,OAASjB,OAAOJ,aAGrBsB,gBAAgBP,OAGT,CACV,CAxBGQ,eAAe5B,IAyBtB,CAGM,kBAAO6B,CAAYC,cACxB,IAAM,MAAMC,WAAWC,SACF,YAAfD,QAAQE,KACVzF,OAAO0F,WAAWH,QAAQE,IAAM,IAAMH,aAG3C,CAGM,WAAAK,CAAYC,MAEf,MAAMC,aAAe/B,SAAS8B,KAAK1F,MAAM,EAAG0F,KAAK5D,QAAQ,OACnD8D,QAAUF,KAAK1F,MAAM0F,KAAK5D,QAAQ,KAAO,GAG/C,GAAI+D,OAAOC,MAAMH,cAEb,OADAxB,kBAAkB,6BACX,EAGX,GAAe,IAAXyB,QAEA,OADAzB,kBAAkB,qBACX,EAIX,MAAM4B,OAASvC,kBAAkBC,MAC5BC,GAAWA,EAAEC,cAAgBgC,eAGlC,OADAxG,KAAKiE,0BAA0B2C,QAAUJ,aAAcC,SAChD,CACV,EC3FL9F,OAAOqF,YAAchC,YAAYgC,YAEnB,MAAOa,OAmBjB,WAAAC,CAAaC,YAAqBC,YAlB5BhH,KAAAiH,MAAgC,CAClCC,MAAU,kBACVC,IAAQ,gBACRC,OAAW,mBACXC,IAAQ,gBACRC,MAAU,kBACVC,IAAQ,gBACRC,MAAU,kBACVC,MAAU,kBACVC,OAAW,oBACXC,UAAc,sBACdC,UAAc,sBACdC,MAAU,mBAGd7H,KAAW+G,YAAG,EACd/G,KAAUgH,WAAG,EA+ENhH,KAAiB8H,kBAAG,SAAUtD,cAEjC,MAAMuD,OAAS1D,kBAAkBC,MAAKC,GAAKA,EAAEC,cAAgBA,eACzDuD,QACAC,qBAAqB,cACrBC,8BAA8BF,SAE9B/C,kBAAkB,wCAE1B,EArFIhF,KAAK+G,YAAcA,YACnB/G,KAAKgH,WAAaA,WAClBrG,OAAOuH,YAAcrB,OAAOsB,eAC/B,CAED,SAAAC,CAAUC,KACN,IAAIC,KAAO,oBACPD,OAAOrI,KAAKiH,QACZqB,KAAOtI,KAAKiH,MAAMoB,MAGtB,IACIE,KAAO,GAOX,OANAA,MAAQ,QACRA,MAAQ,UAAYvI,KAAK+G,YAAc,OACvCwB,MAAQ,UAAYvI,KAAKgH,WAAa,OACtCuB,MAAQ,QAAUF,IAAM,KACxBE,MAAQ,yCAAyBD,KAAO,IACxCC,MAAQ,IACR,IACH,CAGD,QAAAC,GACI,MAAO,sxBAqBDxI,KAAKoI,UAAU,gDACfpI,KAAKoI,UAAU,iEACfpI,KAAKoI,UAAU,qHAKfpI,KAAKoI,UAAU,6CACfpI,KAAKoI,UAAU,sDACfpI,KAAKoI,UAAU,yDACfpI,KAAKoI,UAAU,6DACfpI,KAAKoI,UAAU,sDACfpI,KAAKoI,UAAU,qDACfpI,KAAKoI,UAAU,sEACfpI,KAAKoI,UAAU,sEACfpI,KAAKoI,UAAU,0aAWxB,CAiBM,sBAAOD,CAAgB3D,cAE5B,MAAMuD,OAAS1D,kBAAkBC,MAAKC,GAAKA,EAAEC,cAAgBA,eACvDuD,QACAC,qBAAqB,cACrBS,uBAAuBV,SAEvB/C,kBAAkB,wCAEzB,CAGF,YAAA0D,CAAatB,OAAauB,MAAeC,aAAsBC,MAC3CC,kBAAkB1B,QAAnC,IACI2B,OAAS,mKACyI3B,OAAO5C,kBAAkBmE,oBAwB/K,OApBEI,QAFEF,KAEQ,0HAA0HzB,OAAOtC,YAAc,mLAGzIgE,kBAAkB1B,QAAQ4B,UAAU,WAAW5B,OAAO5C,2CACnDoE,yCAKR,6GAA6GxB,OAAOtC,YAAc,qNAG1GsC,OAAO5C,wLAG1BsE,kBAAkB1B,QAAQ4B,UAAU,WAAW5B,OAAO5C,2CACnDoE,yCAIdG,MACR,CAGD,QAAAE,CAAS7B,QACP,IAAIuB,MAAQ3I,KAAKoI,UAAU,UAG3B,OAFAO,MAAQO,aAAaC,UAAU3J,SAAS4H,OAAO5C,cAAgBxE,KAAKoI,UAAU,OAASO,MACvFA,MAAQO,aAAaE,MAAM5J,SAAS4H,OAAO5C,cAAgBxE,KAAKoI,UAAU,SAAWO,MAC9EA,KACR,CAED,QAAAU,CAASjC,QACP,IAAIwB,aAAe,GAkCnB,OAjCIhE,OAAO0E,eAAiBlC,OAAO5C,aAEjCoE,cAAgB5I,KAAKoI,UAAU,SAAW,IAGnCxD,OAAO2E,yBAAyBnC,OAAO5C,gBAE1CI,OAAO4E,gBAAgBpC,OAAOqC,cAEhCb,cAAgB5I,KAAKoI,UAAU,OAAS,IAIxCQ,cAAgB5I,KAAKoI,UAAU,SAAW,KAG1CxD,OAAO8E,mBAAmBlK,SAAS4H,OAAO5C,gBAE5CoE,cAAgB5I,KAAKoI,UAAU,SAAW,KAExCxD,OAAO+E,WAAWnK,SAAS4H,OAAO5C,gBAEpCoE,cAAgB5I,KAAKoI,UAAU,UAAY,KAEzCxD,OAAOgF,UAAUpK,SAAS4H,OAAO5C,gBACnCoE,cAAgB5I,KAAKoI,UAAU,aAAe,KAE5CxD,OAAOiF,UAAUrK,SAAS4H,OAAO5C,gBACnCoE,cAAgB5I,KAAKoI,UAAU,aAAe,KAE5CxD,OAAOkF,UAAUtK,SAAS4H,OAAO5C,gBACnCoE,cAAgB5I,KAAKoI,UAAU,SAAW,KAErCQ,YACR,CAED,SAAAmB,CAAU3C,QACR,OAAOA,OAAO5C,cAAgBI,OAAOJ,YACtC,CAED,aAAAwF,CAAczD,MACV,MAAM0D,UAAY1D,KAAK3F,MAAM,KAC7B,GAAkC,QAA9BqJ,UAAU,GAAGC,cAEb,YADAlF,kBAAkBhF,KAAKwI,YAI3B,IAIIpB,OAIA5C,aARA2F,eAAiB,GACjBC,kBAAoB,GACpBC,gBAAkB,GAClBC,mBAAqB,GAErBC,YAAc,EACd5B,MAAQ,GACRC,aAAe,GAGf4B,QAAS,EACTC,YAAa,EACbC,SAAU,EACVC,aAAc,EAIlB,IAAK,IAAIC,UAAU1B,aAAa2B,UAQ5B,GANArG,aAAe0E,aAAa2B,UAAUD,QAAQpG,aAG9C4C,OAAS/C,kBAAkBC,MAAMC,GAAMA,EAAEC,cAAgBA,eAGpD4C,OAoBL,GAbAuB,MAAQ3I,KAAKiJ,SAAS7B,QACtBwB,aAAe5I,KAAKqJ,SAASjC,QAGzBpH,KAAK+J,UAAU3C,UAEfwB,aAAe5I,KAAKoI,UAAU,OAAS,IAAMQ,aAG7CuB,eAAiBnK,KAAK0I,aAAatB,OAAQuB,MAAOC,cAAc,IAIhEM,aAAaE,MAAM5J,SAAS4H,OAAO5C,eAEnC,GADA+F,eACKvK,KAAK+J,UAAU3C,OAAQxC,QAAS,CAEjCwF,mBAAqBpK,KAAK0I,aACtBtB,OACAuB,MACAC,cACA,GAEJ,QACH,MACE,IACHM,aAAaC,UAAU3J,SAAS4H,OAAO5C,gBACtCxE,KAAK+J,UAAU3C,OAAQxC,QAC1B,CAEEyF,iBAAmBrK,KAAK0I,aAAatB,OAAQuB,MAAOC,cAAc,GAClE,QACH,CAAW5I,KAAK+J,UAAU3C,UAEvBkD,oBAAsBtK,KAAK0I,aACvBtB,OACAuB,MACAC,cACA,GAEP,MA9CG0B,oBACI,0DAiDRL,UAAUa,MAAMC,MAAgC,UAAvBA,KAAKb,kBAC9B3M,QAAQyN,IAAI,cACZR,QAAS,EACTC,YAAa,EACbC,SAAU,EACVC,aAAc,GAIdV,UAAUa,MAAMC,MAAgC,WAAvBA,KAAKb,kBAC9B3M,QAAQyN,IAAI,eACZR,QAAS,EACTE,SAAU,EACVC,aAAc,GAIdV,UAAUa,MAAMC,MAAgC,SAAvBA,KAAKb,kBAC9B3M,QAAQyN,IAAI,aACZR,QAAS,EACTC,YAAa,EACbE,aAAc,GAKlB3F,kBACI,kBACEuF,YACA,IACArB,aAAaE,MAAMnJ,OACnB,8BAEN+E,kBACI,aACEX,kBAAkBpE,OAClB,IACAiJ,aAAa+B,MACb,qCAEN,IAAIC,YAAc,GAGlBA,aAAe,+BAGfA,YAAcV,OAASU,YAAcf,eAAiBe,YACtDA,YAAcT,WAAaS,YAAcd,kBAAoBc,YAC7DA,YAAcR,QAAUQ,YAAcb,gBAAkBa,YACxDA,YAAcP,YACRO,YAAcZ,mBACdY,YAGNA,aAAe,WAGflG,kBAAkBkG,YACrB,ECxUSC,SAAS1H,YAAY,CAC/B5E,KARa,QASbuD,SAVS,6BAWTC,QAZY,UAaZC,WAAY,sCAbhB,MAgBM8I,YAAc,IAAIpH,YAClBqH,OAAS,IAAIxE,OAZC,GACD,IAiBnByE,+BAA+B,CAC7BC,YAAa,4BACbC,SAAU,EACVC,SAAWC,OAGO,WAAdA,KAAK/F,MACY,gBAAjB+F,KAAKC,SACLD,KAAK7F,SAAWjB,OAAOJ,cAGvBoH,YAAW,KAET,GAA4B,OAAxBhH,OAAOiH,aACT,OAAO,EAIT,MAAMC,sBAAwB,GAAGC,eAC/B,+DACA,kBAAoBnH,OAAOoH,eAAe1M,gBACtCsF,OAAOoH,kBAGbhH,kBAAkB,uYAIwEJ,OAAOE,+DAA+DgH,wNAMhK9G,kBACE,0BAA4BkE,aAAa+C,KAAO,UAElD,IAAK,IAAIC,SAAS/F,SAEhB,GADA+F,MAAQzH,SAASyH,OACW,YAAxB/F,SAAS+F,OAAO9F,IAAmB,CACrCD,SAAS+F,OAAOC,OAAO,SACvB,KACD,CAIHnH,kBAAkB,qDAAqD,GACtE,OAIE,KAKXoH,eAAe,CACX,CACIhG,IAAK,WACLmF,YAAa,6DACbY,OAAS5F,OACL6E,YAAY9E,YAAYC,KAAK,KAMzC6F,eAAe,CACX,CACIhG,IAAK,QACLmF,YAAa,0CACbY,OAAS5F,OACL8E,OAAOrB,cAAczD,KAAK,KAOtC6F,eAAe,CACX,CACIhG,IAAK,SACLmF,YAAa,0CACbY,OAAS5F,OACL8E,OAAOrB,cAAczD,KAAK,KAMtC6F,eAAe,CACX,CACIhG,IAAK,UACLmF,YAAa,sDACbY,OAAS5F,OACL8E,OAAOrB,cAAczD,KAAK","x_google_ignoreList":[0]}