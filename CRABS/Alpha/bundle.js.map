{"version":3,"file":"bundle.js","sources":["../../../../Dev/src/modules/roster.ts","../../../../Dev/src/main.ts"],"sourcesContent":["export default class Roster {\n    const ICONS: Record<string, string> = {\n        \"admin\" : \"./icons/admin.svg\",\n        \"vip\" : \"./icons/vip.svg\",\n        \"player\" : \"./icons/player.svg\",\n        \"you\" : \"./icons/you.svg\",\n        \"owner\" : \"./icons/owner.svg\",\n        \"sub\" : \"./icons/sub.svg\",\n        \"trial\" : \"./icons/trial.svg\",\n        \"lover\" : \"./icons/lover.svg\",\n        \"friend\" : \"./icons/friends.svg\",\n        \"whitelist\" : \"./icons/whitelist.svg\",\n        \"blacklist\" : \"./icons/blacklist.svg\",\n        \"ghost\" : \"./icons/ghost.svg\"\n    }\n\n    icon_height = 0;\n    icon_width = 0\n\n    constructor (icon_height: number, icon_width: number) {\n        this.icon_height = icon_height;\n        this.icon_width = icon_width;\n    }\n\n    printicon(key: string) : string {\n        let ICON = \"./icons/error.svg\";\n        if (key in this.ICONS) {\n            ICON = this.ICONS[key];\n        }\n\n        let html = \"\";\n\n        html += \"<img \";\n        html += \"height=\" + this.icon_height + \"' \";\n        html += \"width='\" + this.icon_width + \"' \";\n        html += \"alt='\" + key + \"' \";\n        html += \"src='\" + ICON + \"'\";\n        html += \">\"\n        return(html);\n    }\n\n    // show help\n    showhelp() : string {\n        return `<table style=\"width: 100%\"><tr><td>\n            <span style=\" text-shadow: 0px 0px 3px #000000; white-space: normal;\">\n            </br>\n            <hr>\n            /player help sheet</br>\n            This command lists the number of admins and players </br>\n            in a room and gives you some informatoin about them </br>\n\n            </br>\n            Arguments:\n            <hr>\n            help - show this menu </br>\n            count - show only the player count </br>\n            admins - show only a list of admins and the counts </br>\n            vips - show only room whitelisted and the counts </br>\n\n            </br>\n            Badges:\n            <hr>\n            ${printicon(\"admin\")} = Person is Admin</br>\n            ${printicon(\"vip\")} = Person is whitelisted in the room </br>\n            ${printicon(\"player\")} = Person is a normal user </br>\n\n            </br>\n            Icons:\n            <hr>\n            ${printicon(\"you\")} = Person is you </br>\n            ${printicon(\"owner\")} = Person is your owner </br>\n            ${printicon(\"sub\")} = Person is your submissive </br>\n            ${printicon(\"trial\")} = Person is on trial with you </br>\n            ${printicon(\"lover\")} = Person is your lover </br>\n            ${printicon(\"friend\")} = Person is a friend </br>\n            ${printicon(\"whitelist\")} = You have this person whitelisted </br>\n            ${printicon(\"blacklist\")} = You have this person blacklisted </br>\n            ${printicon(\"ghost\")} = You have ghosted this person </br>\n\n            </br>\n            Actions:\n            <hr>\n            Click Badge - If you click the badge for a player it will be as if you clicked them to interact. </br>\n            Click name - If you click the name/number of a player it will whisper them without range constraints. </br>\n            </span>\n            </td>\n            </tr>\n            </table>`;\n    }\n\n\n    // Opens the player profile\n    // This functions is setup up to be exposed to the global DOM\n    window.showPlayerProfile = function (MemberNumber) {\n        // Check if the person is still in the room\n        const PLAYER = ChatRoomCharacter.find(C => C.MemberNumber == MemberNumber);\n        if (PLAYER) {\n            ChatRoomStatusUpdate(\"Preference\");\n            InformationSheetLoadCharacter(PLAYER);\n        } else {\n            ChatRoomSendLocal(\"This person is no longer in the room.\");\n        }\n    };\n\n    // This functions is setup up to be exposed to the global DOM\n    window.showPlayerFocus = function (MemberNumber) {\n        // Check if the person is still in the room\n      const PLAYER = ChatRoomCharacter.find(C => C.MemberNumber == MemberNumber);\n        if (PLAYER) {\n            ChatRoomStatusUpdate(\"Preference\");\n            ChatRoomFocusCharacter(PLAYER);\n        } else {\n            ChatRoomSendLocal(\"This person is no longer in the room.\");\n        }\n    };\n\n    // formats the data for outputting\n   formatoutput(player: any, badge: string, player_icons: string, isMe: boolean) : string {\n      let playername = CharacterNickname(player);\n      let output = `<tr>\n                <td style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"cursor:pointer;\" onclick=\"showPlayerFocus(${player.MemberNumber})\">${badge}</span></td>`;\n\n      if (isMe) {\n      // if the player is me, don't let me whisper myself\n        output += `<td style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"color:${player.LabelColor || '#000000'};\n                    font-family: Arial, sans-serif;\n                    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.7); white-space: nowrap;\">\n                      ${CharacterNickname(player).normalize(\"NFKC\")}[${player.MemberNumber}]\n                  </span>${player_icons}</td>\n              </tr>`;\n      }\n      else {\n      // set up whispering\n         output += `<td style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\"><span style=\"color:${player.LabelColor || '#000000'}; cursor:pointer;\n                    font-family: Arial, sans-serif;\n                    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.7); white-space: nowrap;\"\n                    onclick=\"sendWhisper(${player.MemberNumber})\"\n                    onmouseover=\"this.style.textDecoration='underline';\"\n                    onmouseout=\"this.style.textDecoration='none';\">\n                      ${CharacterNickname(player).normalize(\"NFKC\")}[${player.MemberNumber}]\n                  </span>${player_icons}</td>\n              </tr>`;\n      }\n\n      return output;\n    }\n\n    // determine if player is admin or whitelisted in the room and set their badge icon\n    setbadge(player: any) : string {\n      let badge = this.printicon(\"player\");\n      badge = ChatRoomData.Whitelist.includes(player.MemberNumber) ? this.printicon(\"vip\") : badge;\n      badge = ChatRoomData.Admin.includes(player.MemberNumber) ? this.printicon(\"admin\") : badge\n      return badge;\n    }\n\n    setIcons(player: any) : string {\n      let player_icons = \"\";\n      if (Player.OwnerNumber() == player.MemberNumber) {\n        // person owns you\n        player_icons += this.printicon(\"owner\") + \" \";\n      }\n\n      else if (Player.IsInFamilyOfMemberNumber(player.MemberNumber)) {\n        // if they down't own you but you are in their family, we assume you own them\n        if (Player.IsOwnedByPlayer(player.membernumber)) {\n          // The person is fully owned if this is true\n          player_icons += this.printicon(\"sub\") + \" \";\n        }\n        else {\n          // person is on trial\n          player_icons += this.printicon(\"trial\") + \" \"\n        }\n      }\n      if (Player.GetLoversNumbers().includes(player.MemberNumber)) {\n        // person is a lover\n        player_icons += this.printicon(\"lover\") + \" \";\n      }\n      if (Player.FriendList.includes(player.MemberNumber)) {\n        // person is a friend\n        player_icons += this.printicon(\"friend\") + \" \";\n      }\n      if (Player.WhiteList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"whitelist\") + \" \";\n      }\n      if (Player.BlackList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"blacklist\") + \" \";\n      }\n      if (Player.GhostList.includes(player.MemberNumber)) {\n        player_icons += this.printicon(\"ghost\") + \" \";\n      }\n      return player_icons;\n    }\n\n    checkIfMe(player: any) : boolean {\n      return player.MemberNumber == Player.MemberNumber ? true : false;\n    }\n}\n","// import section\nimport Roster from \"./modules/roster\";\nimport WhisperPlus from \"./modules/whisperplus\";\n//\nconst VERSION = \"1.0.0\";\nconst NAME = \"Crazy Roster Add-on By Sin\";\nconst NICKNAME = \"CRABS\";\n\nconst CRABS = bcModSdk.registerMod({\n    name: NICKNAME,\n    fullName: NAME,\n    version: VERSION,\n    repository: \"https://github.com/sin-1337/CRABS\",\n});\n\n\n// TODO: create ui to turn this off!!\n// TODO: reformat this output maybe?\n// set up a handler for room entry\nChatRoomRegisterMessageHandler({\n  Description: \"Send room stats on entry.\",\n  Priority: 0, // trigger immediately\n  Callback: (data) => {\n    // check if we are a player and we entered a room\n    if (\n      data.Type === \"Action\" &&\n      data.Content === \"ServerEnter\" &&\n      data.Sender === Player.MemberNumber\n    ) {\n      // work on a delay\n      setTimeout(() => {\n        // if the player left the room, bail!\n        if (Player.LastChatRoom === null) {\n          return false;\n        }\n\n        // get player permissions\n        const currentPermissionText = `${TextGetInScope(\n          \"Screens/Character/InformationSheet/Text_InformationSheet.csv\",\n          \"PermissionLevel\" + Player.ItemPermission.toString()\n        )} (${Player.ItemPermission})`;\n\n        // format and display the player permissions\n        ChatRoomSendLocal(`\n                  <hr>\n                  <div style=\"padding-left: 5px; padding-right-5px; padding-bottom: 1px; padding-top: 0;\">\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: #5BA3E0; font-weight: bold;\">Player Item Permission: </span>\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: ${Player.LabelColor}; font-weight: bold; text-shadow: 0 0 1px black;\">${currentPermissionText}</span>\n                    <span style=\"display: inline; margin: 0; padding: 0; line-height: 1; color: #5BA3E0; font-weight: bold;\">&nbsp;</span>\n                  </div>\n                `);\n\n        // output room details\n        ChatRoomSendLocal(\n          \"<div>Room details for: \" + ChatRoomData.Name + \"</div>\"\n        );\n        for (let index in Commands) {\n          index = parseInt(index);\n          if (Commands[index].Tag === \"players\") {\n            Commands[index].Action(\"count\");\n            break;\n          }\n        }\n\n        // output message letting players know how to view the full roster\n        ChatRoomSendLocal(\"<div>To see the full roster use /players</div><hr>\");\n      }, 3600);\n    }\n\n    // must return false to allow other handlers to work with the data\n    return false;\n  },\n});\n\n// implements the whisper+ command\nCommandCombine([\n    {\n        Tag: \"whisper+\",\n        Description: \"Enables the /whisper+ command that is global to a map room\",\n        Action: (args) => {\n                // parse arguments into membernumber and messsage\n                const MEMBERNUMBER = parseInt(args.slice(0, args.indexOf(\" \")));\n                let message = args.slice(args.indexOf(\" \") + 1);\n                console.log(message);\n\n                // if membernumber is not a valid number, bail\n                if (Number.isNaN(MEMBERNUMBER)) {\n                    ChatRoomSendLocal(\"Member number is invalid.\");\n                    return 1;\n                }\n\n                if (message == \"\") {\n                    ChatRoomSendLocal(\"Message was blank\");\n                    return 1;\n                }\n\n                const WHISPERPLUS = new WhiserPlus();\n\n                // find player based no membernumber\n                const TARGET = ChatRoomCharacter.find(\n                    (C) => C.MemberNumber == MEMBERNUMBER\n                );\n                WHISPERPLUS.ChatRoomSendWhisperRanged(TARGET, message);\n            },\n    },\n]);\n\n// implements the /players command\nCommandCombine([\n    {\n        Tag: \"players\",\n        Description: \"Show the player count, helpful in maps.\",\n        Action: (args) => {\n            const SPLITARGS = args.split(\" \");\n            const ROSTER = new Roster(25, 25);\n            if (SPLITARGS[0].toLowerCase() == \"help\") {\n                ChatRoomSendLocal(ROSTER.showhelp());\n                return;\n            }\n\n            let me_output_html = \"\"; // holds data about user who ran script\n            let admin_output_html = \"\"; // holds admins\n            let vip_output_html = \"\"; // holds whitelisted users\n            let player_output_html = \"\"; // holds normal players\n            let player; // the person we found in the room\n            let admin_count = 0; // number of admins in the room\n            let badge = \"\"; // holds the admin icon if the player is an admin\n            let player_icons = \"\"; // holds the list of player/status icons (string)\n\n            // filter variables, show or not show certain output\n            let showme = true; // person who ran the script (you)\n            let showadmins = true; // room admins\n            let showvip = true; // room whitelists\n            let showplayers = true; // normal players\n\n\n            //get a list of players\n            for (let person in ChatRoomData.Character) {\n                // find membernumber for current player in list\n                MemberNumber = ChatRoomData.Character[person].MemberNumber;\n\n                // Find player\n                player = ChatRoomCharacter.find((C) => C.MemberNumber == MemberNumber);\n\n                //bail out and return placeholder if player is not available.\n                if (!player) {\n                    player_output_html +=\n                        \"❓ <span style='color:#FF0000'>[Unknown Person]</span>\\n\";\n                    continue;\n                }\n\n                // check if the player is also an admin or vip and add icon with admin given priority\n                badge = ROSTER.setbadge(player);\n                player_icons = ROSTER.setIcons(player);\n\n                // if the player is me (person who ran the script)\n                if (checkIfMe(player)) {\n                    // mark me with a star icon\n                    player_icons = \"⭐ \" + player_icons;\n\n                    // format my outpupt and store\n                    me_output_html = ROSTER.formatoutput(player, badge, player_icons, true);\n                }\n\n                // check if the player is an admin and update the count, also flad the player as admin in the output list.\n                if (ChatRoomData.Admin.includes(player.MemberNumber)) {\n                    admin_count++;\n                    if (!ROSTER.checkIfMe(player, Player)) {\n                        // if the player is not me, output admin and skip rest of loop\n                        admin_output_html += ROSTER.formatoutput(\n                            player,\n                            badge,\n                            player_icons,\n                            false\n                        );\n                        continue;\n                    }\n                } else if (\n                    ChatRoomData.Whitelist.includes(player.MemberNumber) &&\n                    !ROSTER.checkIfMe(player, Player)\n                ) {\n                    // if the player isn't an admin, is the player is whitelested?\n                    vip_output_html += ROSTER.formatoutput(player, badge, player_icons, false);\n                    continue;\n                } else if (!ROSTER.checkIfMe(player)) {\n                    // player is normal, nonadmin, not whitelist, and not me.\n                    player_output_html += ROSTER.formatoutput(\n                        player,\n                        badge,\n                        player_icons,\n                        false\n                    );\n                }\n            }\n\n            // if argument is \"count\", set filter vars and skip loop\n            if (SPLITARGS.some((item) => item.toLowerCase() === \"count\")) {\n                console.log(\"count only\");\n                showme = false;\n                showadmins = false;\n                showvip = false;\n                showplayers = false;\n            }\n\n            // if argument is admins, set filter vars to only show admins and continue\n            if (SPLITARGS.some((item) => item.toLowerCase() === \"admins\")) {\n                console.log(\"admins only\");\n                showme = false;\n                showvip = false;\n                showplayers = false;\n            }\n\n            // if argument is vips, set filter vars to only show vips (whitelisted) and continue\n            if (SPLITARGS.some((item) => item.toLowerCase() === \"vips\")) {\n                console.log(\"vips only\");\n                showme = false;\n                showadmins = false;\n                showplayers = false;\n            }\n\n            //output total number of players/admins\n            //TODO: include this in the table space and add a header\n            ChatRoomSendLocal(\n                \"<div>There are \" +\n                  admin_count +\n                  \"/\" +\n                  ChatRoomData.Admin.length +\n                  \" admins in the room.</div>\"\n            );\n            ChatRoomSendLocal(\n                \"There are \" +\n                  ChatRoomCharacter.length +\n                  \"/\" +\n                  ChatRoomData.Limit +\n                  \" total players in the room.</div>\"\n            );\n            let output_html = \"\";\n\n            // start the tabble and remove the boarders\n            output_html += `<table style=\"border: 0px;\">`;\n\n            // if the filter var resolves to true, add the respective output.\n            output_html = showme ? output_html + me_output_html : output_html;\n            output_html = showadmins ? output_html + admin_output_html : output_html;\n            output_html = showvip ? output_html + vip_output_html : output_html;\n            output_html = showplayers\n                ? output_html + player_output_html\n                : output_html;\n\n            // finish the table\n            output_html += `</table>`;\n\n            // show the final output\n            ChatRoomSendLocal(output_html);\n        },\n    },\n]);\n"],"names":["Roster","constructor","icon_height","icon_width","this","ICONS","admin","vip","player","you","owner","sub","trial","lover","friend","whitelist","blacklist","ghost","showPlayerProfile","MemberNumber","PLAYER","ChatRoomCharacter","find","C","ChatRoomStatusUpdate","InformationSheetLoadCharacter","ChatRoomSendLocal","showPlayerFocus","ChatRoomFocusCharacter","printicon","key","ICON","html","showhelp","formatoutput","badge","player_icons","isMe","CharacterNickname","output","LabelColor","normalize","setbadge","ChatRoomData","Whitelist","includes","Admin","setIcons","Player","OwnerNumber","IsInFamilyOfMemberNumber","IsOwnedByPlayer","membernumber","GetLoversNumbers","FriendList","WhiteList","BlackList","GhostList","checkIfMe","bcModSdk","registerMod","name","fullName","version","repository","ChatRoomRegisterMessageHandler","Description","Priority","Callback","data","Type","Content","Sender","setTimeout","LastChatRoom","currentPermissionText","TextGetInScope","ItemPermission","toString","Name","index","Commands","parseInt","Tag","Action","CommandCombine","args","MEMBERNUMBER","slice","indexOf","message","console","log","Number","isNaN","WHISPERPLUS","WhiserPlus","TARGET","ChatRoomSendWhisperRanged","SPLITARGS","split","ROSTER","toLowerCase","me_output_html","admin_output_html","vip_output_html","player_output_html","admin_count","showme","showadmins","showvip","showplayers","person","Character","some","item","length","Limit","output_html"],"mappings":"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"}